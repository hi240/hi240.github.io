package kr.or.bit;

import java.util.Scanner;

/*
 * 기능,행위 만드는 방법
 * 함수 (function, method)
 * 함수(method): 행위 또는 기능의 최소단위
 * 먹잠 걷잠 먹웃 불가능! > 먹는다. 잔다. 웃는다.
 * 함수는 하나의 기능만 구현한다.
 * 클래스 : 필드 + 함수 + 생성자
 * ohiohohiohioohioohioohioohioohioohiooihioohioohiohohioohioohioohioohioohioohioohio
 * ex) 게임방 : 게임기 동전놓고 ... 함수형태
 *     인형뽑기 동전놓고 인형을 받는 것 ... 함수형태 THTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHT
 * JAVA 함수의 종류는 크게 4가지
 * 1.void, parameter(0):void print(String str) {실행코드} 삐용ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ
 * 2.void, parameter(X):void print(){실행코드} 지나가다가실행해보라네 그래서 막 실행하다가 끝나벌임 . 졸려뒤져벌임. 
 * 1:40? 7:00 rmfja... 5:20 !!!!! :0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * 3.return Type, parameter(0): int print(int data){return 100;}
 * 4.return Type, parameter(X): int print(){return 200;}
 * 부분적인해석을 해드릴게요.
 * void : 돌려주는 것이 없다. 조금더 유식하게 풀면, return value가 없다. 니가 아무리 기다려봐야 나오는거 없어.
 * 자 이제 중요한건 이제 리턴타입이죠. 몇가지 종류가 있을까요?
 * return Type : 정수,실수 등 8가지의 기본 타입을 쓸 수있다.+String+ 참조타입 (class도 타입이다.)+Array+Collection+Interface 
 * ex) Car print(){resturn new Car();} 아뇨@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 * ex) boolean print(){return true;}
 * parameter ( 인자,인수매개값,전달값):게임기의 동전 구멍.(1개일수도, 여러개일 수도 있따.)
 * 동전구멍2개면 2개다 동전 넣어야 실행이 되요. 동전구멍이 10개면 10개 다 넣어야 실행이 돼요.
 * ex)void print(int a, int b, int c, int d, int f) : print(10,20,30,"a") (x) 개수도 모자라고 int도 아니여서 안됨.
 *                                                  : print(10,10,10,10,10,) (0)
 * 함수의 이름은 이왕이면 의미잇는 단어의 조합으로 하자.
 * :getChannelNumber(),getEmpListByEmpno 함수이름을 봣을때 어느정도 유추할수있어야한다. 첫문자는 소문자. . . .
 * 함수라는 건 반드시 호출 되어야한다. 누군가 그의 이름을 부르지 않으면 실행이 안된ㅏ.
 * 
 * 
 * 
 */
public class Fclass {
     public int data;
     //void m()
     public void m() {
    	 System.out.println("일반함수:void ,parameter(x)");
     
     }
     //void m(int...)
     public void m2(int i) {
    	 System.out.println("parameter value (scope : 함수내부) :"+i); //함수의 파라미터는 함수 내에서만 유효하다.
    	 System.out.println("일반함수 : void, parameter(0)");
     }
     public int m3() {
    	 return 100;
     }
     
     public int m4(int data) {
 return data+1;
     }
     
     //확장
     public int sum(int i, int j,int k) {
    	 return i+j+k;
     }
     //접근자가 없음. default가 붙어있음. 즉, default int subSum()
     //다른 폴더에서 사용할 수 없다.
  /*   int subSum(int i) {
    	 return i+100;
     }*/
     //설계자의 의도: subSum 함수의 활용은 내부에 다른 함수를 도와주는 함수...
     
     //의도: subSum()객체 (참조변수가) 접근 못하게.. 내부에서 사용
     //다른 함수가 사용하는 공통함수
     private int subSum(int i) { //private함수는 class내부에서는 동등한입장이기에
    	 return i +100;          //보이지만, 다른함수에서는 직접호출할수없음.
     }
     public void CallSubSum() {
    	 int result= subSum(100);
    	 print(result);
     }
     //private [다른함수를 보조]하는 함수다.
     
     private void print(int data) {
    	 System.out.println("data: "+data);
     }

     private int operationMethod(int data) {
    	 return data*200;
     }
     public int opSum(int data) {
    	 int result = operationMethod(data);
    	 if(result>0) {
    		 return 1;
    	 }else {
    		 return -1;
    	 }
	 
     }
     //a와 b중 큰값을 return max(500,300)일경우 500이 리턴되게.
     Scanner sc = new Scanner(System.in);
      int a,b =sc.nextInt();      //a,b를 각각입력받고.
    	  System.out.println(a+b);
      public int max(int a, int b) {

      return 2;
      }

     
     
     
     
}





