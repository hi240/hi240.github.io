/*
 * 생성자 함수 ! = constructor
 * 생성자의 반대는? 소멸자 !! 
 * 1.함수긴 함순데, 특수한 목적의 함수!
 * 2.특수한 목적? member field 초기화
 * 3.일반함수와 다른점!?
 * 3-1.함수의 이름이 고정돼 있음.(class이름과 동일하게)
 * 3-2.실행시점 때문에 return Type이 없다.(원래는 return type없으려면 void잖아요, 근데 왜 안써요?->default로 void기 때문에 생략)
 * 3-3.실행시점:객체생성(new)되고 변수가 만들어지고 [자동]으로 [호출되는 함수] >> 생성자 함수.
 * 유일하게 이름을 부르지 않아도 자동으로 호출되는 함수.
 * 4.목적:생성되는 객체마다, 강제적으로 다른 member field값을 (초기값) 부여하는 방법
 * class Car {String color;}
 * Car c = new Car(); 이 사람이 차를 만들 때, 무조건 색상을 정해주면 좋겠는데.. 이럴때! 생성자를 쓴다!!!!!
 * 5.생성자 함수 또한 overloading 가능하다.
 * 
 *  
 * Tip) static {} , {} 초기자! (생성자와는 다르다. 왜 언급했는지는 모르겠음;;)
 * 
 * 
 * 
 */
//설계자의 의도: 자동차를 만들 때, 반드시 자동차의 이름을 넣어라.
class Car{
	String carname;
}
public class Ex16_Constructor_overloading {
	public static void main(String[] args) {

		Car c1  = new Car();
	}

}
